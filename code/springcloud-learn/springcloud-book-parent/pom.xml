<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <modules>
        <module>xyc-child-module-test</module>
    </modules>

    <!-- 父pom是为了抽取统一的配置信息和依赖版本控制，方便子pom直接引用，简化子pom的配置 -->

    <!-- 基于 SpringBoot 开发，继承 SpringBoot 的 pom -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.5.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <!-- Parent 的 Group、版本定义 -->
    <groupId>com.xyc.learn</groupId>
    <artifactId>springcloud-book-parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <!-- 父pom 的打包方式必须为pom -->
    <packaging>pom</packaging>
    <name>springcloud-book-parent</name>
    <description>SpringCloud Demo Projects(Eureka) —— Parent Pom</description>

    <!-- 通用属性、JDK版本及通用依赖包版本定义 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>

        <spring.cloud.version>2020.0.3</spring.cloud.version>

        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <!-- ? 作用 -->
        <guava.version>20.0</guava.version>

        <!-- test -->
        <hamcrest.library.version>1.3</hamcrest.library.version>
        <hamcrest.version>2.2</hamcrest.version>
        <spring-boot-starter-test.version>2.5.3</spring-boot-starter-test.version>
    </properties>

    <!-- Spring Cloud 使用2020.0.3 版本 -->
    <!-- 全局管理Spring Cloud版本,并不会引入具体依赖 -->
    <!-- 在 < dependencyManagement> 里面添加 Spring Cloud 和 SpringC loud Alibaba的 bom 信息，这将允许您省略任何 Maven 依赖项的版本，而是将版本控制委派给 BOM-->
    <!-- 一般在项目最顶层的父pom中使用该元素，让所有子模块引用一个依赖而不用显式的列出版本号。maven会沿着父子层次向上走，直到找到一个拥有dependencyManagement元素的项目，然后它就会使用在这个dependencyManagement元素中指定的版本号。-->
    <dependencyManagement>
        <dependencies>
            <!-- 引入Spring Cloud下载仓库 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
            </dependency>

            <!-- 引入Spring Cloud Alibaba 下载仓库 -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba</artifactId>
                <version>2.2.6.RELEASE</version>
            </dependency>

            <!-- test -->
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest-library</artifactId>
                <version>${hamcrest.library.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest</artifactId>
                <version>${hamcrest.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>${spring-boot-starter-test.version}</version>
                <scope>test</scope>
                <exclusions>
                    <exclusion>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-logging</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
        </dependencies>


    </dependencyManagement>

    <!-- 引入全体项目都需要的父依赖，引入后，子项目不需要引入，继承父项目就可以 -->
    <!--
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    -->
<!--    <dependencies>-->
<!--        <dependency>-->
<!--            <groupId>org.springframework.cloud</groupId>-->
<!--            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>-->
<!--            <version>3.0.3</version>-->
<!--        </dependency>-->
<!--    </dependencies>-->

    <!--该插件作用是打一个可运行的包，必须要写在需要打包的项目里。这里的父模块不需要打包运行，所以删掉该插件。-->

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
